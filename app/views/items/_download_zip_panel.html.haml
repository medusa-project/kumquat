-# Requires the following locals:
-#
-# context [Symbol] :directory, :item, or :results
-# num_downloadable_items [Integer]
-# total_byte_size [Integer]

- download_size_limit = Rails.application.credentials.download_size_limit 
- download_size_limit ||= Rails.application.config.respond_to?(:download_size_limit) ? Rails.application.config.download_size_limit : nil 
- download_size_limit ||= 150.gigabytes # Default fallback
- Rails.logger.debug "Using download_size_limit: #{download_size_limit} (#{number_to_human_size(download_size_limit)})"

- if total_byte_size > 0
  - batch_byte_size = MedusaDownloaderClient::TARGET_BATCH_BYTE_SIZE
  - num_batches     = (total_byte_size / batch_byte_size.to_f).ceil
  - batch_size      = (num_downloadable_items / num_batches.to_f).ceil
- else
  - batch_size  = MedusaDownloaderClient::TARGET_BATCH_SIZE
  - num_batches = (num_downloadable_items / batch_size.to_f).ceil

#dl-download-zip-modal.modal.fade{"aria-hidden":     "true",
                                  "aria-labelledby": "dl-download-zip-modal-label",
                                  role:              "dialog",
                                  tabindex:          "-1"}
  .modal-dialog.modal-dialog-centered{role: "document"}
    .modal-content
      .modal-header
        %h4#dl-download-zip-modal-label.modal-title Download Zip File
        %button.close{"aria-label":   "Close",
                      "data-dismiss": "modal",
                      type:           "button"}
          %span{"aria-hidden": "true"} Ã—
      .modal-body
        - case context
        - when :results
          .alert.alert-light
            = icon_for(:info)
            Zip files include high-resolution files for all of the items in the
            current result set.
        - when :item
          .alert.alert-light
            = icon_for(:info)
            Zip files include high-resolution files for the current object in
            TIFF format.
        - when :directory
          .alert.alert-light
            = icon_for(:info)
            Zip files include all files in the current folder tree.

        - if num_batches > 0
          .alert.alert-light 
            = icon_for(:info)
            Estimated file size: #{number_to_human_size(total_byte_size)}

          - if total_byte_size >= download_size_limit.to_i
            .alert.alert-light 
              %p{ style: "color: #ff5733; text-align: center;" }
                = icon_for(:info)
                Due to large file sizes, these items are only available in multiple batch downloads.
                If you need all items in a single download, please close this window and send us a 
                message using the Contact Us form at the bottom of the page. 
              %p.form-text.text-muted.text-center 
                If you know which files you need to download, please download the item directly from the item's page.
              
            - if total_byte_size > 0
              %p.form-text.text-muted.text-center 
                Estimated average file size: #{number_to_human_size(batch_byte_size)}
            = download_captcha(@permitted_params.except(:start).merge(format: :zip)) do 
              = hidden_field_tag("limit", batch_size)
              - options = []
              - if num_downloadable_items > 0
                - start_indices = num_batches.times.map { |i| i * batch_size }.select { |i| i < num_downloadable_items }
                - end_indices = start_indices.map { |i| [i + batch_size - 1, num_downloadable_items - 1].min }
                - options = start_indices.each_with_index.map do |start_idx, i|
                  - end_idx = end_indices[i]
                  - ["Batch #{i + 1}: items #{start_idx + 1} - #{end_idx + 1} (Contains #{end_idx - start_idx + 1} item(s))", start_idx]
              .form-group 
                = select_tag :download_start, options_for_select(options), class: "form-control"
          - else 
            %ul.nav.nav-pills.nav-fill{role: "tablist"}
              %li.nav-item{role: "presentation"}
                %a#dl-download-batches-tab.nav-link{href:            "#dl-download-batches",
                                                  "data-toggle":   "tab",
                                                  role:            "tab",
                                                  "aria-controls": "dl-download-batches"} Download Items in Batches
              %li.nav-item{role: "presentation"}
                %a#dl-download-one-tab.nav-link{href:            "#dl-download-one",
                                                "data-toggle":   "tab",
                                                role:            "tab",
                                                "aria-controls": "dl-download-one"} All Items in One Zip File
            .tab-content 
              #dl-download-batches.tab-pane.fade{role: "tabpanel", "aria-labelledby": "dl-download-batches-tab"}
                - if total_byte_size > 0
                  %p.form-text.text-muted.text-center
                    Estimated average file size: #{number_to_human_size(batch_byte_size)}
                = download_captcha(@permitted_params.except(:start).merge(format: :zip)) do
                  = hidden_field_tag("limit", batch_size)
                  - options = []
                  - if num_downloadable_items > 0
                    - start_indices = num_batches.times.map { |i| i * batch_size }.select { |i| i < num_downloadable_items }
                    - end_indices = start_indices.map { |i| [i + batch_size - 1, num_downloadable_items - 1].min }
                    - options = start_indices.each_with_index.map do |start_idx, i|
                      - end_idx = end_indices[i]
                      - ["Batch #{i + 1}: items #{start_idx + 1} - #{end_idx + 1} (Contains #{end_idx - start_idx + 1} item(s))", start_idx]
                  .form-group
                    = select_tag :download_start, options_for_select(options), class: "form-control"
              #dl-download-one.tab-pane.fade.show{role:              "tabpanel",
                                                  "aria-labelledby": "dl-download-one-tab"}
                %p.form-text.text-muted.text-center
                  Estimated file size: #{number_to_human_size(total_byte_size)}
                = download_captcha(@permitted_params.except(:start).merge(format: :zip, download_start: 0, limit: 0))



        - else
          - if total_byte_size < download_size_limit.to_i 
            %p.form-text.text-muted.text-center
              Estimated file size: #{number_to_human_size(total_byte_size)}
            = download_captcha(@permitted_params.except(:start).merge(format: :zip, download_start: 0, limit: 0))
