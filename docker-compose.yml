##
# docker-compose file for running tests. All dependent services are included
# except for the Medusa Downloader. (The Search Gateway is also technically a
# dependent service, but only to obtain the item count for the landing page
# search field, so that one is probably not worth adding.) # TODO: add a Downloader service
#
# Example invocation: docker-compose up --build --exit-code-from kumquat
#
version: '3'
services:
  kumquat:
    build:
      context: .
      dockerfile: docker/kumquat/Dockerfile
    # TODO: use test helpers to manage the indexes
    command: bash -c "sleep 20 && bin/rails db:prepare && bin/rails \"elasticsearch:indexes:recreate[kumquat]\" && bin/rails test && bin/rails zeitwerk:check"
    # docker-compose exec kumquat /bin/bash
    #command: bash -c "tail -f /dev/null"
  cantaloupe:
    hostname: cantaloupe
    # Cantaloupe is x86-only until the Kakadu native lib is compiled for ARM
    platform: linux/amd64
    build:
      context: .
      dockerfile: docker/cantaloupe/Dockerfile
  elasticsearch:
    hostname: elasticsearch
    build:
      context: .
      dockerfile: docker/elasticsearch/Dockerfile
  s3proxy:
    hostname: s3
    build:
      context: .
      dockerfile: docker/s3proxy/Dockerfile
  mockdusa:
    hostname: mockdusa
    image: 721945215539.dkr.ecr.us-east-2.amazonaws.com/mockdusa:latest
    environment:
      REPOSITORY_ROOT: /repo
    volumes:
      - type: bind
        source: ./docker/mockdusa/content
        target: /repo
        read_only: true
  postgres:
    hostname: postgres
    image: postgres:12-alpine
    environment:
      POSTGRES_DB: kumquat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
